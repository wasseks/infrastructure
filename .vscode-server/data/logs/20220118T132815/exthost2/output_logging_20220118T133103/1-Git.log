Validating found git in: git
Using git 2.9.5 from git
Opening repository for path='/home/akimkinwa' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa/html' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa/.bash_history' failed; ex=Error: spawn ENOTDIR
Opening repository for path='/home/akimkinwa/.bash_logout' failed; ex=Error: spawn ENOTDIR
Opening repository for path='/home/akimkinwa/.bash_profile' failed; ex=Error: spawn ENOTDIR
Opening repository for path='/home/akimkinwa/.bashrc' failed; ex=Error: spawn ENOTDIR
Opening repository for path='/home/akimkinwa/.gitconfig' failed; ex=Error: spawn ENOTDIR
Opening repository for path='/home/akimkinwa/.pki' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa/.ssh' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa/.vscode-server' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa/Dockerfile' failed; ex=Error: spawn ENOTDIR
Opening repository for path='/home/akimkinwa/conf' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa/data' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa/docker-compose.yml' failed; ex=Error: spawn ENOTDIR
Opening repository for path='/home/akimkinwa/git-2.9.5' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa/git-2.9.5.tar.gz' failed; ex=Error: spawn ENOTDIR
Opening repository for path='/home/akimkinwa/html' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
Opening repository for path='/home/akimkinwa' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitErrorCode": "NotAGitRepository",
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: Not a git repository (or any of the parent directories): .git\n"
}
> git init
> git rev-parse --git-dir
Open repository: /home/akimkinwa
> git status -z -u
> git add -A -- .
fatal: Unable to create '/home/akimkinwa/.git/index.lock': File exists.

Another git process seems to be running in this repository, e.g.
an editor opened by 'git commit'. Please make sure all processes
are terminated then try again. If it still fails, a git process
may have crashed in this repository earlier:
remove the file manually to continue.
> git add -A -- .
fatal: Unable to create '/home/akimkinwa/.git/index.lock': File exists.

Another git process seems to be running in this repository, e.g.
an editor opened by 'git commit'. Please make sure all processes
are terminated then try again. If it still fails, a git process
may have crashed in this repository earlier:
remove the file manually to continue.
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git add -A -- .
> git check-ignore -v -z --stdin
> git show --textconv :.gitignore
> git ls-files --stage -- /home/akimkinwa/.gitignore
> git check-ignore -v -z --stdin
> git -c user.useConfigOnly=true commit --quiet --allow-empty-message --file -
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git symbolic-ref --short HEAD
> git remote add origin https://github.com/wasseks/infrastructure.git
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git push -u origin master
> git ls-files --stage -- /home/akimkinwa/.gitignore
> git cat-file -s cd628c59e3646ac0628fb93f84bd0633cc5513ae
> git show --textconv :.gitignore
To https://github.com/wasseks/infrastructure.git
 * [new branch]      master -> master
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /home/akimkinwa/.gitignore
> git cat-file -s cd628c59e3646ac0628fb93f84bd0633cc5513ae
> git show --textconv :.gitignore
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git check-ignore -v -z --stdin
> git check-ignore -v -z --stdin
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :.gitignore
> git ls-files --stage -- /home/akimkinwa/.gitignore
> git cat-file -s cd628c59e3646ac0628fb93f84bd0633cc5513ae
> git check-ignore -v -z --stdin
> git log --format=%H%n%aN%n%aE%n%at%n%ct%n%P%n%B -z -n21 -- /home/akimkinwa/.gitignore
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git ls-files --stage -- /home/akimkinwa/.gitignore
> git cat-file -s cd628c59e3646ac0628fb93f84bd0633cc5513ae
> git show --textconv :.gitignore
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :.gitignore
> git ls-files --stage -- /home/akimkinwa/.gitignore
> git cat-file -s cd628c59e3646ac0628fb93f84bd0633cc5513ae
> git check-ignore -v -z --stdin
> git check-ignore -v -z --stdin
> git check-ignore -v -z --stdin
> git check-ignore -v -z --stdin
> git log --format=%H%n%aN%n%aE%n%at%n%ct%n%P%n%B -z -n21 -- /home/akimkinwa/.gitignore
